name: Deploy to NPM

on:
  push:
    tags:
      - 'v*'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run tests
        run: bun test

      - name: Configure git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get current version
        id: current_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Bump version
        id: version
        run: |
          # Use npm for version bumping (more reliable than bun for this)
          npm version patch --no-git-tag-version
          echo "new_version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Commit version bump
        run: |
          git add package.json
          git commit -m "chore: bump version to v$(node -p "require('./package.json').version")"

      - name: Create and push tag
        run: |
          git tag v$(node -p "require('./package.json').version")

      - name: Publish package
        id: npm_publish
        run: |
          # Use npm for publishing (more reliable than bun publish)
          npm publish
        env:
          NODE_ENV: production
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Push changes and tags
        run: |
          git push origin main
          git push origin --tags

      # Enhanced Notification System - Discord + Telegram
      - name: Discord Deployment Notification
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            COLOR="65280"
            EMOJI="üéâ"
            TITLE="Deployment Successful!"
            DESCRIPTION="Agent Rules Generator has been deployed successfully"
          else
            COLOR="16711680" 
            EMOJI="‚ùå"
            TITLE="Deployment Failed!"
            DESCRIPTION="Agent Rules Generator deployment encountered an error"
          fi
          
          VERSION=$(node -p "require('./package.json').version")
          
          curl -H "Content-Type: application/json" \
               -d "{
                 \"embeds\": [{
                   \"title\": \"${EMOJI} ${TITLE}\",
                   \"description\": \"${DESCRIPTION}\",
                   \"color\": ${COLOR},
                   \"fields\": [
                     {\"name\": \"üì¶ Package\", \"value\": \"agent-rules-generator\", \"inline\": true},
                     {\"name\": \"üè∑Ô∏è Version\", \"value\": \"v${VERSION}\", \"inline\": true},
                     {\"name\": \"üì• Install\", \"value\": \"\`npm install -g agent-rules-generator\`\", \"inline\": false},
                     {\"name\": \"üîó NPM\", \"value\": \"[View Package](https://www.npmjs.com/package/agent-rules-generator)\", \"inline\": true},
                     {\"name\": \"üìã Logs\", \"value\": \"[View Deployment](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\", \"inline\": true}
                   ],
                   \"timestamp\": \"$(date -Iseconds)\"
                 }]
               }" \
               "${{ secrets.DISCORD_WEBHOOK }}" || echo "Discord webhook not configured - add DISCORD_WEBHOOK secret"

      - name: Telegram Deployment Notification
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            STATUS_ICON="‚úÖ"
            STATUS_TEXT="SUCCESS"
          else
            STATUS_ICON="‚ùå"
            STATUS_TEXT="FAILED"
          fi
          
          VERSION=$(node -p "require('./package.json').version")
          
          MESSAGE="${STATUS_ICON} *Agent Rules Generator Deployment*%0A%0A"
          MESSAGE="${MESSAGE}Status: *${STATUS_TEXT}*%0A"
          MESSAGE="${MESSAGE}Version: \`v${VERSION}\`%0A"
          MESSAGE="${MESSAGE}Package: agent-rules-generator%0A%0A"
          
          if [ "${{ job.status }}" = "success" ]; then
            MESSAGE="${MESSAGE}üîó [NPM Package](https://www.npmjs.com/package/agent-rules-generator)%0A"
            MESSAGE="${MESSAGE}üì• Install: \`npm install -g agent-rules-generator\`%0A"
            MESSAGE="${MESSAGE}üéâ Ready for use!"
          else
            MESSAGE="${MESSAGE}üìã [Check Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})%0A"
            MESSAGE="${MESSAGE}üîß Action required - check workflow logs"
          fi
          
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "text=${MESSAGE}" \
            -d "parse_mode=Markdown" \
            -d "disable_web_page_preview=true" || echo "Telegram not configured - add TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID secrets"

      - name: Notify Deployment Complete
        if: success()
        run: |
          echo "=== DEPLOYMENT COMPLETED SUCCESSFULLY ==="
          echo "Package: agent-rules-generator"
          echo "Version: $(node -p "require('./package.json').version")"
          echo "Released: $(date)"
          echo "GitHub: https://github.com/${{ github.repository }}/releases"
          echo "NPM: https://www.npmjs.com/package/agent-rules-generator"
          echo "Install: npm install -g agent-rules-generator"
          echo ""
          echo "STATUS: GitHub Release and NPM Package both published successfully"

      - name: Notify Deployment Failure
        if: failure()
        run: |
          echo "=== DEPLOYMENT FAILED ==="
          echo "Package: agent-rules-generator"
          echo "Failed at: $(date)"
          echo "Check logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo ""
          echo "STATUS: Deployment FAILED - Check workflow logs"